    1  sudo -i 
    2  ssh lab@utility
    3  oc login -u admin -p redhat https://api.ocp4.example.com:6443 
    4  oc whoami --show-console 
    5  ssh lab@utility
    6  ls -al .ssh/
    7  ssh core@master101.ocp4.example.com -i .ssh/lab_rsa
    8  id 
    9  podman images
   10  podman pull quay.io/redhattraining/versioned-hello:v1.0 
   11  podman images quay.io/redhattraining/versioned-hello:v1.0 
   12  podman image inspect quay.io/redhattraining/versioned-hello:v1.0 
   13  podman image inspect quay.io/redhattraining/versioned-hello:v1.1
   14  podman image inspect docker.io/nginx:1.20.2
   15  ls -l .local/
   16  sudo systemctl status crond
   17  oc whoami -
   18  oc whoami
   19  oc whoami --show-server 
   20  oc get project | grep open-cluster
   21  oc get pods -n open-cluster-management-hub  
   22  oc get pods -n open-cluster-management
   23  history 
   24  git clone https://github.com/sanjurajrh/helloworld.git
   25  ls
   26  ls helloworld/
   27  history > history_local_cluster_do480.txt 
   28  ls helloworld/
   29  oc projects 
   30  oc get pods -n openshift-sdn 
   31  oc get pods -A | grep sdn 
   32  oc get csr 
   33  oc describe ns openshift-sdn 
   34  oc get project open-cluster-management-hub 
   35  oc describe project open-cluster-management-hub
   36  oc get configmap cm-config -A 
   37  oc get configmap  -A  
   38  oc get configmap rook-ceph-csi-config -A 
   39  # oc get configmap rook-ceph-csi-config -A 
   40  ssh lab@utility
   41  ls
   42  cp history_local_cluster_do480.txt helloworld/
   43  cd helloworld/
   44  LS
   45  ls
   46  git add . 
   47  git commit -m "Added do480_history"
   48  git push 
   49  cd 
   50  git clone https://github.com/sanjurajrh/ericsson.git
   51  cd ericsson/
   52  ls
   53  cp ../helloworld/history_local_cluster_do480.txt .
   54  cp ../helloworld/managed_cluster_history.txt .
   55  ls
   56  git add .
   57  git commit -m "Added new files"
   58  git push 
   59  cd ..
   60  ls
   61  rm -rf helloworld/
   62  ls
   63  vim token
   64  ssh lab@utility
   65  sudo su -
   66  oc login -u admin -p redhat https://api.ocp4.example.com:6443
   67  oc whoami 
   68  oc whoami --show-server
   69  oc whoami --show-console 
   70  oc get route -A | grep multi 
   71  firefox multicloud-console.apps.ocp4.example.com & 
   72  oc get users
   73  oc policy -h 
   74  oc policy who-can create pods 
   75  oc policy -h 
   76  oc adm policy -h 
   77  oc get clusterrole | grep clusterset 
   78  oc adm policy add-cluster-role-to-user open-cluster-management:managedclusterset:admin:production alice 
   79  oc adm policy add-cluster-role-to-user open-cluster-management:managedclusterset:admin:development alice 
   80  oc adm policy add-cluster-role-to-user open-cluster-management:managedclusterset:view:development bob 
   81  firefox multicloud-console.apps.ocp4.example.com & 
   82  oc get oauth/cluster -o yaml 
   83  oc new-project policy-governance
   84  firefox multicloud-console.apps.ocp4.example.com & 
   85  ls -al .local/
   86  ls -al .local/share/
   87  ls -al 
   88  ls -al .config/
   89  ls -al .venv/
   90  ls -al .venv/labs/share/ansible-runner/utils/
   91  # ls -al .venv/labs/bin/__pycache__/
   92  ls -al .venv/labs/
   93  ls -al .venv/labs/include/python3.6m/
   94  ls -al .venv/labs
   95  ls -al .venv/labs/lib/
   96  ls -al .venv/labs/lib64/python3.6/
   97  ls -al .venv/labs/lib64/python3.6/site
   98  ls -al .venv/labs/lib64/python3.6/site-packages/
   99  ls -al .venv/labs/lib64/python3.6/site-packages/scripts/
  100  ls -al .venv/labs/lib64/python3.6/site-packages/scripts/__pycache__/
  101  oc get packagemanifests.packages.operators.coreos.com | grep compliance
  102  oc describe packagemanifests.packages.operators.coreos.com compliance-operator | less
  103  oc whoami 
  104  oc project 
  105  ls
  106  oc new-project policy-compliance
  107  git clone https://github.com/redhattraining/do480-policy-collection.git 
  108  ls 
  109  cd do480-policy-collection/
  110  ls
  111  ls stable/
  112  ls stable/CM-Configuration-Management/
  113  cd stable/CM-Configuration-Management/
  114  vim policy-compliance-operator-e8-scan.yaml 
  115  # oc create -f policy-compliance-operator-e8-scan.yaml
  116  vim policy-compliance-operator-e8-scan.yaml 
  117  oc create -f policy-compliance-operator-e8-scan.yaml
  118  cd
  119  oc get all -n openshifthift-compliance 
  120  oc get all -n openshift-compliance 
  121  oc project policy-governance
  122  oc get all 
  123  oc get templateinstances.template.openshift.io 
  124  ls -al 
  125  oc get all -n kube-system 
  126  oc get all -n openshift-apiserver
  127  oc get all -n openshift-kube-apiserver-operator 
  128  oc get all -A |  grep template
  129  oc get crd | grep template
  130  oc get crd | grep template -i 
  131  oc get policies.policy.open-cluster-management.io 
  132  oc get policycontrollers.agent.open-cluster-management.io 
  133  oc get policycontrollers.agent.open-cluster-management.io -A | grep template
  134  oc get policycontrollers.agent.open-cluster-management.io -A 
  135  oc new-project policy-gatekeeper
  136  history 
  137  history > day2_locallcluster.txt
  138  ls ericsson/
  139  cp day2_locallcluster.txt ericsson/
  140  ls
  141  ls ericsson/
  142  cd ericsson/
  143  git add .
  144  git commit -m "Day2 content added"
  145  git push 
  146  git pull --rebase
  147  git add .
  148  git commit -m "Day2 content added1"
  149  git push 
  150  cd
  151  sudo su - 
  152  ssh lab@utility 
  153  cat token 
  154  vim token 
  155  cat token 
  156  ssh lab@utility
  157  oc adm policy add-cluster-role-to-user cluster-admin opsadm 
  158  oc get ns | grep registry 
  159  oc create ns registry
  160  oc get ns | grep registry 
  161  ls
  162  ls do480_exercise_files/
  163  ssh lab@utility
  164  ls 
  165  rct cat-cert ldap.crt 
  166  cp do480_exercise_files/config.yaml . 
  167  cp do480_exercise_files/quay-registry.yaml .
  168  vim config.yaml 
  169  oc get secret -n registry 
  170  oc project registry
  171  oc create secret generic --from-file config.yaml=./config.yaml --from-file ldap.crt=./ldap.crt init-config-bundle-secret -n registry 
  172  oc get secret 
  173  cat quay-registry.yaml 
  174  oc apply -f quay-registry.yaml
  175  watch 'oc get pods -n registry | grep central'
  176  oc get pods 
  177  oc get route 
  178  firefox central-quay-registry.apps.ocp4.example.com & 
  179  history 
  180  history >> quay_history.txt
  181  cp quay_history.txt do480_exercise_files/
  182  cd do480_exercise_files/
  183  git add .
  184  git commit -m "Day2 content added1"
  185  git commit -m "Day3 content added1"
  186  git push 
  187  cp quay_history.txt ../ericsson/
  188  cd ../ericsson/
  189  git add .
  190  git commit -m "Day3 content added1"
  191  git push 
  192  sudo su - 
  193  ls 
  194  git clone https://github.com/sanjurajrh/do480_exercise_files.git
  195  ls do480
  196  ls do480_exercise_files/
  197  oc login -u admin -p redhat https://api.ocp4.example.com:6443 
  198  oc whoami 
  199  oc whoami --show-console 
  200  oc get route -A | grep multi 
  201  ls 
  202  cd do480_exercise_files/
  203  ls
  204  oc get sc
  205   
  206  cat obc.yaml 
  207  cat mcobs.yaml 
  208  cat secret.yaml 
  209  cp *.yaml ~/
  210  cd 
  211  ls
  212  oc get project | grep cluster 
  213  oc create ns open-cluster-management-observability 
  214  oc get project | grep cluster 
  215  oc get secret -n openshift-config
  216  DOCKER_CONFIG_JSON=(oc extract secret/pull-secret -n openshift-config --to=-)
  217  DOCKER_CONFIG_JSON=$(oc extract secret/pull-secret -n openshift-config --to=-)
  218  oc create secret generic multiclusterhub-operator-pull-secret --from-literal=.dockerconfigjson=${DOCKER_CONFIG_JSON} -n open-cluster-management-observability 
  219  cat obc.yaml 
  220  oc get obc 
  221  oc get obc -n open-cluster-management-observability
  222  oc create -f obc.yaml 
  223  oc get obc -n open-cluster-management-observability
  224  oc get cm -n open-cluster-management-observability 
  225  oc get secret -n open-cluster-management-observability
  226  oc extract configmap/thanos-bc -n open-cluster-management-observability --to=-
  227  oc extract secret/thanos-bc -n open-cluster-management-observability --to=-
  228  cat secret.yaml 
  229  vi secret.yaml 
  230  cat secret.yaml 
  231  oc get secret -n open-cluster-management-observability 
  232  oc create -f secret.yaml 
  233  oc get secret -n open-cluster-management-observability 
  234  cat mcobs.yaml 
  235  oc get multiclusterobservabilities.observability.open-cluster-management.io -n open-cluster-management-observability 
  236  oc create -f mcobs.yaml 
  237  oc get multiclusterobservabilities.observability.open-cluster-management.io -n open-cluster-management-observability 
  238  watch 'oc describe multiclusterobservabilities -n open-cluster-management-observability) 
  239  '
  240  watch 'oc describe multiclusterobservabilities -n open-cluster-management-observability'
  241  watch 'oc describe multiclusterobservabilities -n open-cluster-management-observability | grep -A6 Status'
  242  oc get managedcluster
  243  oc label managedcluster managed-cluster observability=disabled -n open-cluster-management
  244  oc get cm -n open-cluster-management-observability 
  245  oc describe cm/observability-metrics-allowlist -n open-cluster-management-observability
  246  oc get cm -n open-cluster-management-observability 
  247  oc describe cm/thanos-ruler-default-rules -n open-cluster-management-observability 
  248  oc get cm -n open-cluster-management-observability 
  249  cat mcobs.yaml 
  250  oc get pods -n open-cluster-management-observability 
  251  oc get mco -n open-cluster-management-observability
  252  oc edit mco/observability -n open-cluster-management-observability
  253  oc get pods -n open-cluster-management-observability 
  254  watch oc get pods -n open-cluster-management-observability 
  255  oc delete mco observability 
  256  oc delete ns open-cluster-management-observability 
  257  history 
  258  history > local_cluster_day3.txt
  259  cp local_cluster_day3.txt ericsson/
  260  cd ericsson/
  261  git add .
  262  git commit -m "Day3"
  263  git push 
  264  cat ../do480_exercise_files/quay-registry.yaml 
  265  oc get is -n openshift | grep php 
  266  oc describe is/php -n openshift
  267  cat ../do480_exercise_files/quay-registry.yaml 
  268  cat ../do480_exercise_files/config.yaml 
  269  cat ~/token 
  270  ls 
  271  ls do480_exercise_files/
  272  podman login quay.io
  273  cat /run/user/1000/containers/auth.json 
  274  # echo "c2FuanVyYWpfcmg6UmVkSGF0MSE=" | base64 -d 
  275  oc login -u admin -p redhat https://api.ocp4-mng.example.com:6443 
  276  oc get project | grep test 
  277  oc project test123
  278  oc get all
  279  oc create secret generic quayio --from-file=.dockerconfigjson=/run/user/1000/containers/auth.json --type=kubernetes.io/dockerconfigjson 
  280  oc create secret -h 
  281  oc get sa 
  282  oc secrets link -h 
  283  oc describe sa default 
  284  oc secrets link default quayio --for=pull
  285  oc describe sa default 
  286  oc new-app --name=phpapp --image=quay.io/sanjuraj_rh/php-info:latest
  287  oc get all
  288  oc get route
  289  oc expose service/phpapp
  290  oc get route 
  291  curl phpapp-test123.apps.ocp4-mng.example.com
  292  skopeo copy docker://quay.io/sanjuraj_rh/php_info:latest docker://docker.io/reply2sanjuraj/php_info:latest
  293  skopeo inspect docker://quay.io/sanjuraj_rh/php-info:latest 
  294  skopeo copy docker://quay.io/sanjuraj_rh/php-info:latest docker://docker.io/reply2sanjuraj/php_info:latest
  295  skopeo copy docker://quay.io/sanjuraj_rh/php-info:latest docker://quay.io/sanjuraj_rh/php_info:latest
  296  # container image naming format 
  297  # registryserver/accountname/imagename:tag
  298  podman pull docker.io/nginx
  299  oc explain config.openshift.io
  300  oc explain Image
  301  oc explain images
  302  oc explain images.config.openshift.io
  303  oc explain images.config.openshift.io.spec.
  304  oc explain images.config.openshift.io.spec.registrySources
  305  history 
  306  oc get packagemanifests.packages.operators.coreos.com | less
  307  # OCM 
  308  # STACKROX
  309  # CEPH storage
  310  # OKD
  311  oc login -u admin -p redhat https://api.ocp4.example.com:6443 
  312  oc whoami 
  313  oc whoami --show-console
  314  history 
  315  oc whoami 
  316  oc whoami --show-server 
  317  oc login -u admin -p redhat https://api.ocp4.example.com:6443
  318  oc project stackrox
  319  oc -n stackrox get secret central-htpasswd -o go-template='{{index .data "password" | base64decode}}'
  320  echo "o934h0s5pc05LQnwq50I7tawb" > admin_passwd.txt
  321  cat admin_passwd.txt
  322  ls Downloads/
  323  cat Downloads/stackrox-init-bundle-cluster-init-secrets.yaml | grep -i pem 
  324  oc create -f Downloads/stackrox-init-bundle-cluster-init-secrets.yaml -n stackrox 
  325  sudo su - 
  326  history 
  327  history > local_day4.txt
    1  oc login -u admin -p redhat https://api.ocp4-mng.example.com:6443 
    2  oc whoami 
    3  echo "" | base64 -d | kubectl create -f - || test $? -eq 0 && sleep 2 && echo "" | base64 -d | kubectl apply -f - || echo "VGhlIGNsdXN0ZXIgY2Fubm90IGJlIGltcG9ydGVkIGJlY2F1c2UgaXRzIEtsdXN0ZXJsZXQgQ1JEIGFscmVhZHkgZXhpc3RzLgpFaXRoZXIgdGhlIGNsdXN0ZXIgd2FzIGFscmVhZHkgaW1wb3J0ZWQsIG9yIGl0IHdhcyBub3QgZGV0YWNoZWQgY29tcGxldGVseSBkdXJpbmcgYSBwcmV2aW91cyBkZXRhY2ggcHJvY2Vzcy4KRGV0YWNoIHRoZSBleGlzdGluZyBjbHVzdGVyIGJlZm9yZSB0cnlpbmcgdGhlIGltcG9ydCBhZ2Fpbi4=" | base64 -d
    4  oc get packagemanifests.packages.operators.coreos.com | less
    5  oc describe packagemanifests.packages.operators.coreos.com advanced-cluster-management | less
    6  history 
    7  history > managed_cluster_history.txt 
    8  cp managed_cluster_history.txt /home/student/helloworld/
    9  chown -R student:student /home/student/
   10  history 
   11  history | grep template
   12  history 
   13  oc login -u admin -p redhat https://api.ocp4-mng.example.com:6443 
   14  oc get project | grep cluster 
   15  oc get all -n open-cluster-management-addon-observability
   16  oc get project | grep mysql 
   17  oc project mysql 
   18  oc get all 
   19  oc describe deployment
   20  oc set triggers -h 
   21  oc whoami 
   22  ls
   23  kubectl create deployment myapp --image=quay.io/redhattraining/versioned-hello:v1.0 --dry-run=client -o yaml > deployment.yml
   24  vim deployment.yml
   25  cat deployment.yml 
   26  oc new-project myproject 
   27  ls
   28  cat deployment.yml 
   29  kubectl kustomize . 
   30  oc project 
   31  oc get all
   32  kubectl apply -f deployment.yml 
   33  kubectl get all 
   34  kubectl exec -it pod/myapp-7cf48648cb-49g4q -- curl localhost:8080 
   35  ls
   36  mkdir base 
   37  kubectl delete -f deployment.yml 
   38  kubectl get all 
   39  mv deployment.yml base/
   40  tree .
   41  vim base/kustomization.yml
   42  vim ~/.vimrc
   43  vim base/kustomization.yml
   44  cat base/kustomization.yml 
   45  mkdir overlays
   46  mkdir overlays/dev
   47  mkdir overlays/prod
   48  vim overlays/dev/kustomization.yml
   49  tree 
   50  cat overlays/dev/kustomization.yml
   51  cp overlays/dev/kustomization.yml overlays/prod/
   52  vim overlays/prod/kustomization.yml 
   53  cat overlays/prod/kustomization.yml
   54  vim overlays/dev/kustomization.yml 
   55  vim base/kustomization.yml 
   56  kubectl get all
   57  kubectl apply -k base/
   58  kubectl get all --show-labels
   59  kubectl apply -k overlays/dev/
   60  kubectl get all --show-labels
   61  kubectl delete -k overlays/dev/
   62  kubectl delete -k base/
   63  kubectl get all
   64  vim overlays/dev/kustomization.yml 
   65  cat overlays/dev/kustomization.yml
   66  kubectl apply -k overlays/prod/
   67  kubectl get all --show-labels
   68  kubectl exec -it pod/prod-myapp-587bf94654-pgdpm -- curl localhost:8080 
   69  kubectl apply -k overlays/dev/
   70  kubectl get all --show-labels
   71  kubectl get pods
   72  kubectl exec -it pod/prod-myapp-587bf94654-pgdpm -- curl localhost:8080 
   73  kubectl exec -it pod/dev-myapp-7d9687d5b7-x75nz -- curl localhost:8080 
   74  kubectl delete -k overlays/dev/
   75  cp base/deployment.yml overlays/dev/replica-count.yml
   76  vim overlays/dev/replica-count.yml
   77  cat overlays/dev/replica-count.yml
   78  vim overlays/dev/kustomization.yml 
   79  cat overlays/dev/kustomization.yml
   80  kubectl kustomize overlays/dev/
   81  kubectl kustomize overlays/prod
   82  kubectl get pods 
   83  kubectl apply -k overlays/dev/
   84  kubectl get pods 
   85  cat overlays/dev/kustomization.yml 
   86  history 
   87  history > kustomize.txt 
   88  cp kustomize.txt /home/student/ericsson/
   89  history 
   90  history >> /home/student/local_day4.txt 
